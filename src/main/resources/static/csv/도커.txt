JAR 파일 : 압축된 ZIP 파일이며 class파일, 파일 및 이미지, 사운드 클립, 보안 인증서와 같은 응용 프로그램 리소스를 저장
(수백 수천 개의 파일을 압축된 형식으로 저장할 수 있기 때문에 JAR 파일을 쉽게 공유가능)

-> 자바 플랫폼에 응용 소프트웨어나 라이브러리를 배포하기 위한 소프트웨어 패키지 파일 포맷 (서버 구성품)


*Spring Profiles는 애플리케이션 설정을 특정 환경에서만 적용되게 하거나, 환경 별(local, test, production 등)로 다르게 적용할 때 사용

-spring-profiles-active 를 통해 기본 활성 프로필을 설정




*Docker는 서버마다 동일한 환경을 구성

-> 개발 환경과 배포 환경의 일관성을 유지

Docker Image : 도커에서 서비스 운영에 필요한 서버 프로그램, 소스코드 및 라이브러리, 컴파일된 실행 파일 등 응용프로그램을 실행 
하는데 필요한 모든 것을 포함하는 패키지

1) 따라서 도커 이미지의 용량은 보통 수백MB ~ 수GB가 넘는다. 하지만 가상머신의 이미지에 비하면 굉장히 적은 용량

2) 이미지는 상태 값을 가지지 않고 변하지 않는다. (Immutable)

3) 하나의 이미지는 여러 컨테이너를 생성할 수 있고, 컨테이너가 삭제되더라도 이미지는 변하지 않고 그대로 남아 있음

4) 도커 이미지들은 github과 유사한 서비스인 DockerHub를 통해 버전 관리 및 배포(push&pull)가 가능



docker login - docker hub 로그인

./gradlew bulid - build/libs 경로에 jar 파일 생성

docker build -t [docker hub id]/[이미지 이름:태그] [Dockerfile의 경로] // docker 이미지 생성

docker images - docker 이미지 리스트

docker rmi -f [이미지id] - docker 이미지 삭제


docker ps - 동작중인 컨테이너 확인

docker ps -a - 정지된 컨테이너 확인

docker stop [컨테이너id] - 동작중인 컨테이너 중지

docker stop $(docker ps -a -q) - 모든 컨테이너 중지

docker rm [컨테이너id] - 컨테이너 삭제

docker rm $(docker ps -a -q) - 모든 컨테이너 삭제


docker run [이미지 repository명] -p 8080:8080  - 8080에서 8080 으로 컨테이너 객체 생성 요청



docker-compose -f [도커 compese 파일명] up  :  도커 컴포즈 파일 실행하는 명령어







*테스트 기능


Spock : Grovy언어를 이용하여 테스트 코드를 작성할 수 있는 프레임워크이며 JUnit과 비교하여 코드를 더 간결하게 작성 가능

Testcontainer 

- 운영환경과 유사한 DB스펙으로 독립적인 환경에서 테스트 코드를 작성하여 테스트가 가능

- MySQL 같은 데이터베이스의 컨테이너 인스턴스를 사용하여 데이터 액세스 계층 코드를 테스트

- 테스트 코드가 실행 될 때 자동으로 도커 컨테이너를 실행하여 테스트 하고, 테스트가 끝나면 자동으로 컨테이너를 종료 및 정리